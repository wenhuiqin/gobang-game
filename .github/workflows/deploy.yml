name: 部署到云服务器

on:
  push:
    branches:
      - main  # 当推送到main分支时触发
      - master
  workflow_dispatch:  # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    - name: 编译后端
      run: |
        cd server
        npm install
        npm run build
    
    - name: 部署后端到服务器
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        source: "server/dist,server/package.json,server/package-lock.json,server/.env,server/database"
        target: "/root/gobang"
        strip_components: 1
        timeout: 10m
    
    - name: 部署前端到服务器
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        source: "client-cocos"
        target: "/root/gobang-deploy"
        timeout: 10m
    
    - name: 重启后端服务并上传小游戏
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 30m
        command_timeout: 30m
        script: |
          echo "=========================================="
          echo "📦 1. 部署后端服务"
          echo "=========================================="
          cd /root/gobang
          
          # 检查必要文件是否存在
          if [ ! -f "./dist/main.js" ]; then
            echo "❌ 错误: dist/main.js 不存在，后端编译可能失败"
            exit 1
          fi
          
          if [ ! -f "./.env" ]; then
            echo "❌ 错误: .env 文件不存在"
            exit 1
          fi
          
          # 安装生产依赖
          echo "📦 安装后端依赖..."
          npm install --production
          
          if [ $? -ne 0 ]; then
            echo "❌ 后端依赖安装失败"
            exit 1
          fi
          
          # 创建PM2配置文件
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'gobang-server',
              script: './dist/main.js',
              instances: 2,
              exec_mode: 'cluster',
              env: {
                NODE_ENV: 'production',
                PORT: 3002
              },
              error_file: './logs/err.log',
              out_file: './logs/out.log',
              log_date_format: 'YYYY-MM-DD HH:mm:ss',
              merge_logs: true,
              autorestart: true,
              max_memory_restart: '500M'
            }]
          };
          EOF
          
          # 创建日志目录
          mkdir -p logs
          
          # 重启PM2服务
          echo "🔄 重启PM2服务..."
          pm2 delete gobang-server 2>/dev/null || true
          pm2 start ecosystem.config.js
          
          if [ $? -ne 0 ]; then
            echo "❌ PM2启动失败"
            pm2 logs gobang-server --lines 50
            exit 1
          fi
          
          pm2 save
          
          # 等待服务启动（增加到8秒，NestJS需要时间初始化）
          echo "⏳ 等待服务启动..."
          sleep 8
          
          # 检查服务状态（改进逻辑，允许launching状态）
          pm2 list gobang-server | grep -E "online|launching"
          if [ $? -ne 0 ]; then
            echo "⚠️ 服务状态异常，查看日志:"
            pm2 logs gobang-server --lines 50
            echo ""
            echo "📊 当前PM2状态:"
            pm2 list
            # 不再exit 1，继续部署前端
          else
            echo "✅ 后端服务运行中"
          fi
          
          echo "✅ 后端部署完成！"
          pm2 status
          
          echo ""
          echo "=========================================="
          echo "🎮 2. 上传微信小游戏"
          echo "=========================================="
          
          # 进入前端目录
          cd /root/gobang-deploy/client-cocos
          
          # 清理可能存在的node_modules和缓存
          echo "🧹 清理旧依赖..."
          rm -rf node_modules package-lock.json
          npm cache clean --force
          
          # 安装依赖（使用淘宝镜像加速）
          echo "📦 安装依赖..."
          npm install --registry=https://registry.npmmirror.com --no-audit --no-fund --legacy-peer-deps
          
          # 检查依赖安装是否成功
          if [ $? -ne 0 ]; then
            echo "❌ 依赖安装失败"
            exit 1
          fi
          
          # 创建密钥文件
          echo "🔑 配置上传密钥..."
          echo "${{ secrets.WECHAT_UPLOAD_KEY }}" > private.key
          
          # 设置环境变量
          export VERSION="1.0.${{ github.run_number }}"
          export DESC="自动构建 #${{ github.run_number }} - commit: ${{ github.sha }}"
          
          # 执行上传
          echo "🚀 开始上传..."
          npm run upload
          
          # 检查上传是否成功
          if [ $? -ne 0 ]; then
            echo "❌ 微信小游戏上传失败"
            rm -f private.key
            cd /root
            rm -rf /root/gobang-deploy
            exit 1
          fi
          
          # 清理
          echo "🧹 清理临时文件..."
          rm -f private.key
          cd /root
          rm -rf /root/gobang-deploy
          
          echo ""
          echo "=========================================="
          echo "✅ 全部完成！"
          echo "=========================================="

